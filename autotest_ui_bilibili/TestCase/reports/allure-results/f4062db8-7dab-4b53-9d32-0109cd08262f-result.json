{"name": "test_bilibili_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"geetest_commit_tip\">...</div> is not clickable at point (1049, 647). Other element would receive the click: <div class=\"geetest_panel\">...</div>\n  (Session info: chrome=127.0.6533.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7D458EEA2+31554]\n\t(No symbol) [0x00007FF7D4507ED9]\n\t(No symbol) [0x00007FF7D43C872A]\n\t(No symbol) [0x00007FF7D442012E]\n\t(No symbol) [0x00007FF7D441DAF2]\n\t(No symbol) [0x00007FF7D441AF8B]\n\t(No symbol) [0x00007FF7D441A156]\n\t(No symbol) [0x00007FF7D440C151]\n\t(No symbol) [0x00007FF7D443D02A]\n\t(No symbol) [0x00007FF7D440BA76]\n\t(No symbol) [0x00007FF7D443D240]\n\t(No symbol) [0x00007FF7D445C977]\n\t(No symbol) [0x00007FF7D443CDD3]\n\t(No symbol) [0x00007FF7D440A33B]\n\t(No symbol) [0x00007FF7D440AED1]\n\tGetHandleVerifier [0x00007FF7D4898B1D+3217341]\n\tGetHandleVerifier [0x00007FF7D48E5AE3+3532675]\n\tGetHandleVerifier [0x00007FF7D48DB0E0+3489152]\n\tGetHandleVerifier [0x00007FF7D463E776+750614]\n\t(No symbol) [0x00007FF7D451375F]\n\t(No symbol) [0x00007FF7D450EB14]\n\t(No symbol) [0x00007FF7D450ECA2]\n\t(No symbol) [0x00007FF7D44FE16F]\n\tBaseThreadInitThunk [0x00007FFE3E30257D+29]\n\tRtlUserThreadStart [0x00007FFE3FACAF28+40]", "trace": "self = <TestCase.test_login.TestChannel object at 0x0000020F0F4A1A20>\nrefresh_web = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6dc42e2ed445cf312966296879888fed\")>\n\n    def test_bilibili_login(self, refresh_web):\n        \"\"\"\n        b站登录模块正向测试\n        \"\"\"\n        # result_text = bp(refresh_web).webstar()\n        # assert result_text != \"登录\"\n        bp = BilibiliLoginPage(refresh_web)\n>       page_title = bp.login_process()\n\ntest_login.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\PageObjects\\bilibili_login_page.py:107: in login_process\n    self.click_confirm_button()\n..\\PageObjects\\bilibili_login_page.py:101: in click_confirm_button\n    self.wait_click_ele(self.confirmCode_button)\n..\\Common\\basepage.py:45: in wait_click_ele\n    ele.click()\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020F0F4A3280>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7D44FE16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE3E30257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFE3FACAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"geetest_commit_tip\">...</div> is not clickable at point (1049, 647). Other element would receive the click: <div class=\"geetest_panel\">...</div>\nE         (Session info: chrome=127.0.6533.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7D458EEA2+31554]\nE       \t(No symbol) [0x00007FF7D4507ED9]\nE       \t(No symbol) [0x00007FF7D43C872A]\nE       \t(No symbol) [0x00007FF7D442012E]\nE       \t(No symbol) [0x00007FF7D441DAF2]\nE       \t(No symbol) [0x00007FF7D441AF8B]\nE       \t(No symbol) [0x00007FF7D441A156]\nE       \t(No symbol) [0x00007FF7D440C151]\nE       \t(No symbol) [0x00007FF7D443D02A]\nE       \t(No symbol) [0x00007FF7D440BA76]\nE       \t(No symbol) [0x00007FF7D443D240]\nE       \t(No symbol) [0x00007FF7D445C977]\nE       \t(No symbol) [0x00007FF7D443CDD3]\nE       \t(No symbol) [0x00007FF7D440A33B]\nE       \t(No symbol) [0x00007FF7D440AED1]\nE       \tGetHandleVerifier [0x00007FF7D4898B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF7D48E5AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF7D48DB0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF7D463E776+750614]\nE       \t(No symbol) [0x00007FF7D451375F]\nE       \t(No symbol) [0x00007FF7D450EB14]\nE       \t(No symbol) [0x00007FF7D450ECA2]\nE       \t(No symbol) [0x00007FF7D44FE16F]\nE       \tBaseThreadInitThunk [0x00007FFE3E30257D+29]\nE       \tRtlUserThreadStart [0x00007FFE3FACAF28+40]\n\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "\n        b站登录模块正向测试\n        ", "attachments": [{"name": "log", "source": "a78e74bf-d66d-4f43-9e3a-78313f96a4b3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "64d1809c-e8b8-491f-8dac-c3403d9a39e5-attachment.txt", "type": "text/plain"}], "start": 1724504038533, "stop": 1724504043033, "uuid": "68016ee2-c22b-4c97-961a-07a4067d3187", "historyId": "e32cd6d7e78f38254b1b58e86ecc6253", "testCaseId": "e32cd6d7e78f38254b1b58e86ecc6253", "fullName": "TestCase.test_login.TestChannel#test_bilibili_login", "labels": [{"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestChannel"}, {"name": "host", "value": "SEVEN"}, {"name": "thread", "value": "28024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_login"}]}
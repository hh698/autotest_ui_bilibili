{"name": "test_bilibili_login1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 129\nCurrent browser version is 131.0.6778.86 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF71C8AFDA5+29557]\n\t(No symbol) [0x00007FF71C822240]\n\t(No symbol) [0x00007FF71C6DB6EA]\n\t(No symbol) [0x00007FF71C71DF67]\n\t(No symbol) [0x00007FF71C71CFFB]\n\t(No symbol) [0x00007FF71C717B1E]\n\t(No symbol) [0x00007FF71C71268E]\n\t(No symbol) [0x00007FF71C7632E0]\n\t(No symbol) [0x00007FF71C762970]\n\t(No symbol) [0x00007FF71C7572A3]\n\t(No symbol) [0x00007FF71C7212DF]\n\t(No symbol) [0x00007FF71C722451]\n\tGetHandleVerifier [0x00007FF71CBDDCBD+3363469]\n\tGetHandleVerifier [0x00007FF71CC29B47+3674391]\n\tGetHandleVerifier [0x00007FF71CC1EAEB+3629243]\n\tGetHandleVerifier [0x00007FF71C96FC66+815670]\n\t(No symbol) [0x00007FF71C82D6EF]\n\t(No symbol) [0x00007FF71C8292B4]\n\t(No symbol) [0x00007FF71C829450]\n\t(No symbol) [0x00007FF71C8181FF]\n\tBaseThreadInitThunk [0x00007FFF9225259D+29]\n\tRtlUserThreadStart [0x00007FFF932EAF38+40]", "trace": "@pytest.fixture(scope=\"function\")\n    def access_web():\n        # # 创建 chrome_options 对象\n        # chrome_options = Options()\n        # # 设置 detach 选项为 True\n        # chrome_options.add_experimental_option(\"detach\", True)\n        #\n        # # 前置：打开浏览器\n        # # 修改页面加载策略\n        # desired_capabilities = DesiredCapabilities.CHROME\n        # # 注释这两行会导致最后输出结果的延迟，即等待页面加载完成再输出;该行的作用是不等待页面完全加载，立即返回控制权给程序，可提高执行速度，但可能导致获取的内容不完整\n        # desired_capabilities[\"pageLoadStrategy\"] = \"none\"\n        #\n        # # 较新的 Selenium 版本中，推荐使用 Service 类来管理 WebDriver 的服务\n        # driver = webdriver.Chrome(options=chrome_options, service=Service())\n        # driver.get(\"https://passport.bilibili.com/login\")\n        # driver.maximize_window()\n        # driver.implicitly_wait(10)\n        #\n        # # 返回对象\n        # yield driver\n        # # 后置：关闭浏览器\n        # # driver.quit()\n>       driver = global_driver.get_driver()\n\nconftest.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Common\\globaldriver.py:18: in get_driver\n    self.driver = webdriver.Chrome(options=chrome_options, service=Service())\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018E49FE3CD0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF71C8181FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF9225259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF932EAF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 129\nE       Current browser version is 131.0.6778.86 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF71C8AFDA5+29557]\nE       \t(No symbol) [0x00007FF71C822240]\nE       \t(No symbol) [0x00007FF71C6DB6EA]\nE       \t(No symbol) [0x00007FF71C71DF67]\nE       \t(No symbol) [0x00007FF71C71CFFB]\nE       \t(No symbol) [0x00007FF71C717B1E]\nE       \t(No symbol) [0x00007FF71C71268E]\nE       \t(No symbol) [0x00007FF71C7632E0]\nE       \t(No symbol) [0x00007FF71C762970]\nE       \t(No symbol) [0x00007FF71C7572A3]\nE       \t(No symbol) [0x00007FF71C7212DF]\nE       \t(No symbol) [0x00007FF71C722451]\nE       \tGetHandleVerifier [0x00007FF71CBDDCBD+3363469]\nE       \tGetHandleVerifier [0x00007FF71CC29B47+3674391]\nE       \tGetHandleVerifier [0x00007FF71CC1EAEB+3629243]\nE       \tGetHandleVerifier [0x00007FF71C96FC66+815670]\nE       \t(No symbol) [0x00007FF71C82D6EF]\nE       \t(No symbol) [0x00007FF71C8292B4]\nE       \t(No symbol) [0x00007FF71C829450]\nE       \t(No symbol) [0x00007FF71C8181FF]\nE       \tBaseThreadInitThunk [0x00007FFF9225259D+29]\nE       \tRtlUserThreadStart [0x00007FFF932EAF38+40]\n\nD:\\Users\\Huang\\PycharmProjects\\autotest_ui_bilibili\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "5cd32f3a-9de9-4b1d-a54b-7c2736f5975a-attachment.txt", "type": "text/plain"}], "start": 1733037255385, "stop": 1733037255385, "uuid": "bae83860-2cf3-44b4-af38-cad853ba71b8", "historyId": "fc477441db4918a09321559896692cef", "testCaseId": "fc477441db4918a09321559896692cef", "fullName": "TestCase.test_login.TestChannel#test_bilibili_login1", "labels": [{"name": "severity", "value": "[normal]"}, {"name": "feature", "value": "模块：b站登录"}, {"name": "story", "value": "正向登录测试，账号密码均正确"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestChannel"}, {"name": "host", "value": "SEVEN"}, {"name": "thread", "value": "11436-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_login"}]}